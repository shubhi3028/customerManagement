!function(c){"use strict";function s(e,t){this.init("multiselectsplitter",e,t)}s.DEFAULTS={selectSize:null,maxSelectSize:null,clearOnFirstChange:!1,onlySameGroup:!1,groupCounter:!1,maximumSelected:null,afterInitialize:null,maximumAlert:function(e){alert("Only "+e+" values can be selected")},createFirstSelect:function(e,t){return"<option>"+e+"</option>"},createSecondSelect:function(e,t){return"<option>"+e+"</option>"},template:'<div class="row" data-multiselectsplitter-wrapper-selector><div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-firstselect-selector></select></div> \x3c!-- Add the extra clearfix for only the required viewport --\x3e<div class="col-xs-6 col-sm-6"><select class="form-control" data-multiselectsplitter-secondselect-selector></select></div></div>'},s.prototype.init=function(e,t,l){var i=this,n=(i.type=e,i.last$ElementSelected=[],i.initialized=!1,i.$element=c(t),i.$element.hide(),i.options=c.extend({},s.DEFAULTS,l),i.$element.after(i.options.template),i.$wrapper=i.$element.next("div[data-multiselectsplitter-wrapper-selector]"),i.$firstSelect=c("select[data-multiselectsplitter-firstselect-selector]",i.$wrapper),i.$secondSelect=c("select[data-multiselectsplitter-secondselect-selector]",i.$wrapper),0),o=0;0!=i.$element.find("optgroup").length&&(i.$element.find("optgroup").each(function(){var e=c(this).attr("label"),t=c(i.options.createFirstSelect(e,i.$element)),e=(t.val(e),t.attr("data-current-label",t.text()),i.$firstSelect.append(t),c(this).find("option").length);o<e&&(o=e),n++}),e=Math.max(n,o),e=Math.min(e,10),i.options.selectSize?e=i.options.selectSize:i.options.maxSelectSize&&(e=Math.min(e,i.options.maxSelectSize)),i.$firstSelect.attr("size",e),i.$secondSelect.attr("size",e),i.$element.attr("multiple")&&i.$secondSelect.attr("multiple","multiple"),i.$element.is(":disabled")&&i.disable(),i.$firstSelect.on("change",c.proxy(i.updateParentCategory,i)),i.$secondSelect.on("click change",c.proxy(i.updateChildCategory,i)),i.update=function(){var e;i.$element.find("option").length<1||(e=((e=i.$element.find("option:selected:first")).length?e:i.$element.find("option:first")).parent().attr("label"),i.$firstSelect.find('option[value="'+e+'"]').prop("selected",!0),i.$firstSelect.trigger("change"))},i.update(),i.initialized=!0,i.options.afterInitialize&&i.options.afterInitialize(i.$firstSelect,i.$secondSelect))},s.prototype.disable=function(){this.$secondSelect.prop("disabled",!0),this.$firstSelect.prop("disabled",!0)},s.prototype.enable=function(){this.$secondSelect.prop("disabled",!1),this.$firstSelect.prop("disabled",!1)},s.prototype.createSecondSelect=function(){var o=this;o.$secondSelect.empty(),c.each(o.$element.find('optgroup[label="'+o.$firstSelect.val()+'"] option'),function(e,t){var l=c(this).val(),i=c(this).text(),n=c(o.options.createSecondSelect(i,o.$firstSelect));n.val(l),c.each(o.$element.find("option:selected"),function(e,t){c(t).val()==l&&n.prop("selected",!0)}),o.$secondSelect.append(n)})},s.prototype.updateParentCategory=function(){var e=this;e.last$ElementSelected=e.$element.find("option:selected"),e.options.clearOnFirstChange&&e.initialized&&e.$element.find("option:selected").prop("selected",!1),e.createSecondSelect(),e.checkSelected(),e.updateCounter()},s.prototype.updateCounter=function(){var n=this;n.$element.attr("multiple")&&n.options.groupCounter&&c.each(n.$firstSelect.find("option"),function(e,t){var l=c(t).val(),i=c(t).data("currentLabel"),l=n.$element.find('optgroup[label="'+l+'"] option:selected').length;0<l&&(i+=" ("+l+")"),c(t).html(i)})},s.prototype.checkSelected=function(){var e,l,t=this;t.$element.attr("multiple")&&t.options.maximumSelected&&(l=0,(l="function"==typeof t.options.maximumSelected?t.options.maximumSelected(t.$firstSelect,t.$secondSelect):t.options.maximumSelected)<1||t.$element.find("option:selected").length>l&&(t.$firstSelect.find("option:selected").prop("selected",!1),t.$secondSelect.find("option:selected").prop("selected",!1),t.initialized?(t.$element.find("option:selected").prop("selected",!1),t.last$ElementSelected.prop("selected",!0)):c.each(t.$element.find("option:selected"),function(e,t){l-1<e&&c(t).prop("selected",!1)}),e=t.last$ElementSelected.first().parent().attr("label"),t.$firstSelect.find('option[value="'+e+'"]').prop("selected",!0),t.createSecondSelect(),t.options.maximumAlert(l)))},s.prototype.basicUpdateChildCategory=function(e,t){var l=this,i=(l.last$ElementSelected=l.$element.find("option:selected"),l.$secondSelect.val()),n=(c.isArray(i)||(i=[i]),l.$firstSelect.val()),o=!1;l.$element.attr("multiple")?l.options.onlySameGroup?c.each(l.$element.find("option:selected"),function(e,t){if(c(t).parent().attr("label")!=n)return!(o=!0)}):t||(o=!0):o=!0,o?l.$element.find("option:selected").prop("selected",!1):c.each(l.$element.find("option:selected"),function(e,t){n==c(t).parent().attr("label")&&-1==c.inArray(c(t).val(),i)&&c(t).prop("selected",!1)}),c.each(i,function(e,t){l.$element.find('option[value="'+t+'"]').prop("selected",!0)}),l.checkSelected(),l.updateCounter(),l.$element.trigger("change")},s.prototype.updateChildCategory=function(e){"change"==e.type?this.timeOut=setTimeout(c.proxy(function(){this.basicUpdateChildCategory(e,e.ctrlKey)},this),10):"click"==e.type&&(clearTimeout(this.timeOut),this.basicUpdateChildCategory(e,e.ctrlKey))},s.prototype.destroy=function(){this.$wrapper.remove(),this.$element.removeData(this.type),this.$element.show()},c.fn.multiselectsplitter=function(l){return this.each(function(){var e=c(this),t=e.data("multiselectsplitter");!t&&"destroy"==l||(t||e.data("multiselectsplitter",t=new s(this,"object"==typeof l&&l)),"string"==typeof l&&t[l]())})},c.fn.multiselectsplitter.Constructor=s,c.fn.multiselectsplitter.VERSION="1.0.1"}(jQuery);